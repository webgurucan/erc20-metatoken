/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IMetaERC20WrapperInterface extends Interface {
  functions: {
    deposit: TypedFunctionDescription<{
      encode([_token, _value]: [string, BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_token, _to, _value]: [string, string, BigNumberish]): string;
    }>;

    onERC1155Received: TypedFunctionDescription<{
      encode([_operator, _from, _id, _value, _data]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    onERC1155BatchReceived: TypedFunctionDescription<{
      encode([_operator, _from, _ids, _values, _data]: [
        string,
        string,
        (BigNumberish)[],
        (BigNumberish)[],
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class IMetaERC20Wrapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IMetaERC20Wrapper;
  attach(addressOrName: string): IMetaERC20Wrapper;
  deployed(): Promise<IMetaERC20Wrapper>;

  on(event: EventFilter | string, listener: Listener): IMetaERC20Wrapper;
  once(event: EventFilter | string, listener: Listener): IMetaERC20Wrapper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IMetaERC20Wrapper;
  removeAllListeners(eventName: EventFilter | string): IMetaERC20Wrapper;
  removeListener(eventName: any, listener: Listener): IMetaERC20Wrapper;

  interface: IMetaERC20WrapperInterface;

  functions: {
    getTokenID(_token: string): Promise<void>;

    getIdAddress(_id: BigNumberish): Promise<void>;

    getNTokens(): Promise<void>;

    deposit(
      _token: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _token: string,
      _to: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: (BigNumberish)[],
      _values: (BigNumberish)[],
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  filters: {};

  estimate: {
    deposit(_token: string, _value: BigNumberish): Promise<BigNumber>;

    withdraw(
      _token: string,
      _to: string,
      _value: BigNumberish
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      _operator: string,
      _from: string,
      _ids: (BigNumberish)[],
      _values: (BigNumberish)[],
      _data: Arrayish
    ): Promise<BigNumber>;
  };
}
